{"version":3,"sources":["components/HomePage.js","components/ParticleComponent.js","components/App.js","serviceWorker.js","index.js"],"names":["HomePage","props","this","type_animation","options","strings","typeSpeed","onComplete","stopAnimation","typed","Typed","intro","destroy","className","ref","e","to","React","Component","ParticleComponent","params","background","color","value","particles","number","size","interactivity","events","onhover","enable","mode","onclick","App","bind","state","setState","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPA+CeA,E,kDAzCX,WAAYC,GAAQ,uCACVA,G,gEAIN,GAAIC,KAAKD,MAAME,eAAgB,CAC3B,IAAMC,EAAU,CACZC,QAAS,CACL,oHAEJC,UAAW,GACXC,WAAYL,KAAKD,MAAMO,eAE3BN,KAAKO,MAAQ,IAAIC,IAAMR,KAAKS,MAAOP,M,2CAKnCF,KAAKO,OACLP,KAAKO,MAAMG,Y,+BAIT,IAAD,OACL,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,SACX,0BACIC,IAAK,SAACC,GACF,EAAKJ,MAAQI,MAIzB,kBAAC,IAAD,CAAMF,UAAWX,KAAKD,MAAME,eAAiB,UAAY,UAAWa,GAAG,UAAvE,kB,GAlCOC,IAAMC,W,wBCgCdC,MAlCf,WACI,OACI,kBAAC,IAAD,CACIC,OAAQ,CACJC,WAAY,CACRC,MAAO,CACHC,MAAO,YAGfC,UAAW,CACPC,OAAQ,CACJF,MAAO,IAEXG,KAAM,CACFH,MAAO,IAGfI,cAAe,CACXC,OAAQ,CACJC,QAAS,CACLC,QAAQ,EACRC,KAAM,WAEVC,QAAS,CACLF,QAAQ,EACRC,KAAM,cCenBE,E,kDApCX,WAAYhC,GAAQ,IAAD,8BACf,cAAMA,IACDO,cAAgB,EAAKA,cAAc0B,KAAnB,gBACrB,EAAKC,MAAQ,CACThC,gBAAgB,GAJL,E,4DASfD,KAAKkC,SAAS,CACVjC,gBAAgB,M,+BAKpB,OACI,kBAAC,IAAD,KACI,yBAAKU,UAAU,QACX,kBAAC,EAAD,MACA,kBAAC,IAAD,KAII,kBAAC,IAAD,CAAOwB,KAAK,KACR,kBAAC,EAAD,CACIlC,eAAgBD,KAAKiC,MAAMhC,eAC3BK,cAAeN,KAAKM,wB,GA3BlCS,IAAMC,W,OCMJoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.94541ea7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./HomePage.css\";\nimport Typed from \"typed.js\";\nimport { Link } from \"react-router-dom\";\n\nclass HomePage extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentDidMount() {\n        if (this.props.type_animation) {\n            const options = {\n                strings: [\n                    \"Hello!^500 I am <strong>Marcus Loo</strong>. ^500I am currently a Machine Learning Grad Student at Georgia Tech.\",\n                ],\n                typeSpeed: 40,\n                onComplete: this.props.stopAnimation,\n            };\n            this.typed = new Typed(this.intro, options);\n        }\n    }\n\n    componentWillMount() {\n        if (this.typed) {\n            this.typed.destroy();\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"homeMain\">\n                <div className=\"intro\">\n                    <span\n                        ref={(e) => {\n                            this.intro = e;\n                        }}\n                    />\n                </div>\n                <Link className={this.props.type_animation ? \"nothing\" : \"aboutMe\"} to=\"/about\">\n                    more info\n                </Link>\n            </div>\n        );\n    }\n}\n\nexport default HomePage;\n// export { Home, About };\n","import React from \"react\";\nimport Particles from \"react-particles-js\";\n\nfunction ParticleComponent() {\n    return (\n        <Particles\n            params={{\n                background: {\n                    color: {\n                        value: \"#282c34\",\n                    },\n                },\n                particles: {\n                    number: {\n                        value: 50,\n                    },\n                    size: {\n                        value: 3,\n                    },\n                },\n                interactivity: {\n                    events: {\n                        onhover: {\n                            enable: true,\n                            mode: \"repulse\",\n                        },\n                        onclick: {\n                            enable: true,\n                            mode: \"push\",\n                        },\n                    },\n                },\n            }}\n        />\n    );\n}\n\nexport default ParticleComponent;\n","import React from \"react\";\nimport \"./App.css\";\nimport HomePage from \"./HomePage\";\nimport { BrowserRouter as Router, Route, Link, Switch } from \"react-router-dom\";\nimport ParticleComponent from \"./ParticleComponent\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.stopAnimation = this.stopAnimation.bind(this);\n        this.state = {\n            type_animation: true,\n        };\n    }\n\n    stopAnimation() {\n        this.setState({\n            type_animation: false,\n        });\n    }\n\n    render() {\n        return (\n            <Router>\n                <div className=\"home\">\n                    <ParticleComponent />\n                    <Switch>\n                        {/* <Route path=\"/about\">\n                            <About />\n                        </Route> */}\n                        <Route path=\"/\">\n                            <HomePage\n                                type_animation={this.state.type_animation}\n                                stopAnimation={this.stopAnimation}\n                            />\n                        </Route>\n                    </Switch>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}